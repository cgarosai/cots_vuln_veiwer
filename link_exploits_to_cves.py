import sqlite3
import psycopg2
import os
from dotenv import load_dotenv

load_dotenv()

def get_PG_connection():
    try:
        conn = psycopg2.connect(
            host=os.getenv('DB_HOST'),
            database=os.getenv('DB_NAME'),
            user=os.getenv('DB_USER'),
            password=os.getenv('DB_PASSWORD')
        )
        return conn
    except Exception as e:
        error_msg = str(e)
        raise ConnectionError("Erreur lors de la connexion à la base de données PG:  "+ error_msg)
    
def get_SQLite_connection():
    try:
        conn = sqlite3.connect(os.getenv("SQLITE_DB")
        )
        return conn
    except Exception as e:
        error_msg = str(e)
        raise ConnectionError("Erreur lors de la connexion à la base de données SQLITE3:  "+ error_msg)


PGcon = get_PG_connection()
PGcur = PGcon.cursor()

SLcur = get_SQLite_connection().cursor()

PGcur.execute("select name from cve where not exploit;")
cvesNoExploit = PGcur.fetchall()
cvesToUpdate = []
for (cveName,) in cvesNoExploit:
    SLcur.execute('''SELECT EXISTS(                                        
    SELECT 1 FROM exploits WHERE cve_id = ? LIMIT 1
    ) AS has_exploit;''', (cveName,))
    if SLcur.fetchone() == (1,):
        cvesToUpdate.append(cveName)
    if len(cvesToUpdate) > 1000:
        print("Too much in chunk, let's persist !")
        PGcur.execute("UPDATE cve SET exploit = TRUE WHERE name = ANY(%s);", (cvesToUpdate,))
        print(PGcur.mogrify("UPDATE cve SET exploit = TRUE WHERE name = ANY(%s);", (cvesToUpdate,)))
        cvesToUpdate = []

if cvesToUpdate:
    print("Persisting !")
    PGcur.execute("UPDATE cve SET exploit = TRUE WHERE name = ANY(%s);", (cvesToUpdate,))
    print(PGcur.mogrify("UPDATE cve SET exploit = TRUE WHERE name = ANY(%s);", (cvesToUpdate,)))

PGcon.commit()